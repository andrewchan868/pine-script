//@version=4
study("ZLEMA + PVT + MAMA FAMA")

// ZLEMA
length = input(title="Length", type=input.integer, defval=14)
highlightMovements = input(title="Highlight Movements ?", type=input.bool, defval=true)
zlemaSrc = input(title="Source", type=input.source, defval=close)

lag = floor((length - 1) / 2)

zlema = ema(zlemaSrc + (zlemaSrc - zlemaSrc[lag]), length)

zlemaColor = highlightMovements ? (zlema > zlema[1] ? color.green : color.red) : #6d1e7f
//plot(zlema, title="ZLEMA", linewidth=2, color=zlemaColor, transp=0)

zlemaBuyAlert = zlema > zlema[1]
zlemaSellAlert = not zlemaBuyAlert

//PVT
showSignal = input(title="Show Signal ?", type=input.bool, defval=true)
signalType = input(title="Signal Smoothing Type", defval="SMA", options=["EMA", "SMA"])
signalLength = input(title="Signal Smoothing Length", type=input.integer, defval=21)
highlightCrossovers = input(title="Highlight Crossovers ?", type=input.bool, defval=false)
applyFilling = input(title="Apply Ribbon Filling ?", type=input.bool, defval=true)

signal = signalType == "EMA" ? ema(pvt, signalLength) : sma(pvt, signalLength)

trendColor = pvt > signal ? #0ebb23 : color.red
pvtColor = applyFilling ? trendColor : #0094ff
signalColor = applyFilling ? trendColor : #ff6a00

// pvtPlot = plot(pvt, title="PVT", linewidth=2, color=pvtColor, transp=0)
// signalPlot = plot(showSignal ? signal : na, title="Signal", color=signalColor, transp=0)

// transparent = color.new(color.white, 100)

// fillColor = applyFilling ? trendColor : transparent
// fill(pvtPlot, signalPlot, color=fillColor, transp=70)

pvtBuyTrend = pvt > signal
pvtSellTrend = not pvtBuyTrend

pvtBuyAlert = crossover(pvt, signal)
pvtSellAlert = crossunder(pvt, signal)

// plotshape(pvtBuyAlert and highlightCrossovers ? pvt : na, title="Crossover", location=location.absolute, style=shape.circle, size=size.tiny, color=color.green, transp=0)
// plotshape(pvtSellAlert and highlightCrossovers ? pvt : na, title="Crossunder", location=location.absolute, style=shape.circle, size=size.tiny, color=color.red, transp=0)

// alertcondition(pvtBuyAlert, title="Alert: Buy", message="Buy\nSymbol: {{exchange}}:{{ticker}}\nPrice: {{close}}")
// alertcondition(pvtSellAlert, title="Alert: Sell", message="Sell\nSymbol: {{exchange}}:{{ticker}}\nPrice: {{close}}")



// MAMA FAMA
src = input(close, title="Source")
crypto_boolean = input(title="crypto", type=input.bool, defval=false)
fast_length = input(title="Fast Length", type=input.integer, defval=10)
slow_length = input(title="Slow Length", type=input.integer, defval=20)

// Original Hilbert by everget : https://www.tradingview.com/script/aaWzn9bK-Ehlers-MESA-Adaptive-Moving-Averages-MAMA-FAMA/ {
PI = 2 * asin(1)

hilbertTransform(src) =>
    0.0962 * src + 0.5769 * nz(src[2]) - 0.5769 * nz(src[4]) - 0.0962 * nz(src[6])

computeComponent(src, mesaPeriodMult) =>
    hilbertTransform(src) * mesaPeriodMult

computeAlpha(src, fastLimit, slowLimit) =>
    mesaPeriod = 0.0
    mesaPeriodMult = 0.075 * nz(mesaPeriod[1]) + 0.54
    
    smooth = 0.0
    smooth := (4 * src + 3 * nz(src[1]) + 2 * nz(src[2]) + nz(src[3])) / 10

    detrender = 0.0
    detrender := computeComponent(smooth, mesaPeriodMult)
    
    // Compute InPhase and Quadrature components
    I1 = nz(detrender[3])
    Q1 = computeComponent(detrender, mesaPeriodMult)
    
    // Advance the phase of I1 and Q1 by 90 degrees
    jI = computeComponent(I1, mesaPeriodMult)
    jQ = computeComponent(Q1, mesaPeriodMult)
    
    I2 = 0.0
    Q2 = 0.0
    
    // Phasor addition for 3 bar averaging
    I2 := I1 - jQ
    Q2 := Q1 + jI
    
    // Smooth the I and Q components before applying the discriminator
    I2 := 0.2 * I2 + 0.8 * nz(I2[1])
    Q2 := 0.2 * Q2 + 0.8 * nz(Q2[1])
    
    // Homodyne Discriminator
    Re = I2 * nz(I2[1]) + Q2 * nz(Q2[1])
    Im = I2 * nz(Q2[1]) - Q2 * nz(I2[1])
    
    Re := 0.2 * Re + 0.8 * nz(Re[1])
    Im := 0.2 * Im + 0.8 * nz(Im[1])
    
    if Re != 0 and Im != 0
        mesaPeriod := 2 * PI / atan(Im / Re)
    
    if mesaPeriod > 1.5 * nz(mesaPeriod[1])
        mesaPeriod := 1.5 * nz(mesaPeriod[1])
    
    if mesaPeriod < 0.67 * nz(mesaPeriod[1])
        mesaPeriod := 0.67 * nz(mesaPeriod[1])

    if mesaPeriod < 6
        mesaPeriod := 6

    if mesaPeriod > 50
        mesaPeriod := 50

    mesaPeriod := 0.2 * mesaPeriod + 0.8 * nz(mesaPeriod[1])

    phase = 0.0

    if I1 != 0
        phase := (180 / PI) * atan(Q1 / I1)
    
    deltaPhase = nz(phase[1]) - phase
    
    if  deltaPhase < 1
        deltaPhase := 1

    alpha = fastLimit / deltaPhase
    
    if  alpha < slowLimit
        alpha := slowLimit
    [alpha,alpha/2.0]
// }
len = 20
er = abs(change(src,len)) / sum(abs(change(src)),len)

[a,b] = computeAlpha(src, er, er*0.1)
mama = 0.0
mama := a * src + (1 - a) * nz(mama[1])

fama = 0.0
fama := b * mama + (1 - b) * nz(fama[1])

//mama_p = plot(mama,color=#00000000,title="MAMA")
//fama_p = plot(fama,color=#00000000,title="FAMA")
//fill(mama_p,fama_p,color=mama>fama?color.blue:color.purple,transp=50)
// Plot colors
col_grow_above = #26A69A
col_grow_below = #FFCDD2
col_fall_above = #B2DFDB
col_fall_below = #EF5350
col_macd = #0094ff
col_signal = #ff6a00

normalize = 300
fast_ma = ema(src, fast_length)
slow_ma = ema(src, slow_length)
macd = fast_ma - slow_ma
hist =  mama - fama
hist_z = (hist - sma(hist, normalize))/stdev(hist, normalize)
macd_z = (macd - sma(macd, normalize))/stdev(macd, normalize)
macd_z_std = stdev(macd_z, 20)
hist_z_ema5 = ema(hist_z, 10)

// plot(hist_z, title="hist", color=col_macd, transp=0)
// plot(hist_z_ema5, title="hist_ema5", color=col_signal, transp=0)
// plot(macd_z_std, title="macd_z_std", color=#B2DFDB, transp=0)
// plot(macd_z, title="macd_z", color=#FFCDD2, transp=0)
mamabuy = false
mamasell = false

//if crypto_boolean != false
//    buy := crossover(hist_z , hist_z_ema5) and (macd_z_std < 0.5)
//    sell := crossunder(hist_z , hist_z_ema5) and (macd_z_std < 0.5) 
//else
//    buy := (crossover(hist_z , hist_z_ema5) and (macd_z_std < 0.6)) or (crossover(hist_z , hist_z_ema5) and (abs(hist_z) > 1.5))
//    sell := (crossunder(hist_z , hist_z_ema5) and (macd_z_std < 0.6) ) or (crossunder(hist_z , hist_z_ema5) and (abs(hist_z) > 1.5))


// if crypto_boolean != false
//     mamabuy := crossover(hist_z , hist_z_ema5)
//     mamasell := crossunder(hist_z , hist_z_ema5)
// else
//     mamabuy := (crossover(hist_z , hist_z_ema5)) or (crossover(hist_z , hist_z_ema5))
//     mamasell := (crossunder(hist_z , hist_z_ema5)) or (crossunder(hist_z , hist_z_ema5))


mamabuy := hist_z > hist_z_ema5
mamasell := not mamabuy


buy_plot = false
sell_plot = false

if(mamabuy and zlemaBuyAlert and pvtBuyTrend)
    buy_plot := true
else if (not mamabuy and zlemaBuyAlert and pvtBuyTrend)
    buy_plot := true
else if (mamabuy and not zlemaBuyAlert and pvtBuyTrend)
    buy_plot := true
else if (mamabuy and zlemaBuyAlert and not pvtBuyTrend)
    buy_plot := true    

sell_plot := not buy_plot
    
// if(mamasell and zlemaSellAlert and pvtSellTrend)
//     sell_plot := true
// else if (not mamasell and zlemaSellAlert and pvtSellTrend)
//     sell_plot := true
// else if (mamasell and not zlemaSellAlert and pvtSellTrend)
//     sell_plot := true
// else if (mamasell and zlemaSellAlert and not pvtSellTrend)
//     sell_plot := true        
    
buy_plot_filtered = buy_plot and not buy_plot[1]
sell_plot_filtered = sell_plot and not sell_plot[1]

// plot(zlemaBuyAlert?10:0, color = color.red)
// plot(pvtBuyTrend?15:0, color = color.blue)
// plot(mamabuy?20:0, color = color.yellow)

// PLOT - SIGNALS
plotshape(buy_plot_filtered,style=shape.circle,location=location.top,color=color.blue,size=size.normal,transp=0,text="Buy",textcolor=color.blue,title='Buy') 
plotshape(sell_plot_filtered,style=shape.circle,location=location.top,color=color.red,size=size.normal,transp=0,text="Sell",textcolor=color.red,title='Sell')


alertcondition(buy_plot_filtered, title="Alert: Buy", message="Buy\nSymbol: {{exchange}}:{{ticker}}\nPrice: {{close}}")
alertcondition(sell_plot_filtered, title="Alert: Sell", message="Sell\nSymbol: {{exchange}}:{{ticker}}\nPrice: {{close}}")
